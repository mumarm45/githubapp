{"version":3,"sources":["components/Nav.js","components/Home.js","util/api.js","components/Popular.js","components/PlayerInput.js","components/PlayerPreview.js","components/Battle.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","NavLink","exact","activeClassName","to","React","Component","Home","Link","params","concat","getUserData","player","axios","all","username","get","then","user","data","getRepo","score","profile","repos","followers","reduce","count","resp","stargazers_count","getStarCount","calculateScore","sortPlayer","players","sort","b","SelectLanguage","props","map","lang","style","selectedLanguage","color","onClick","onSelect","bind","key","RepoGrid","repo","re","idx","src","owner","avatar_url","alt","login","href","html_url","name","prototype","PropTypes","array","isRequired","string","func","Popular","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","repositories","updateLanguage","assertThisInitialized","_this2","setState","language","encodedURI","window","encodeURI","res","items","fetchPopularRepository","response","Popular_SelectLanguage","Popular_RepoGrid","PlayerInput","handleChange","handleSubmit","event","value","target","preventDefault","onSubmit","id","htmlFor","label","placeholder","type","autoComplete","onChange","disabled","protoType","defaultProps","PreviewPlayer","avatar","children","Battle","playerOneName","playerTwoName","playerOneImage","playerTwoImage","handelSubmit","onResetHandler","newState","match","components_PlayerInput","PlayerPreview","pathname","url","search","Player","lable","Result_Profile","info","protoTypes","Profile","location","company","following","public_repos","blog","Result","winner","loser","error","loading","parse","catch","err","battle","result","Result_Player","App","store","BrowserRouter","components_Nav","Switch","Route","path","component","render","Boolean","hostname","ReactDOM","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18c7192d.chunk.js","sourcesContent":["/**\n * Created by mumarm45 on 29/11/2018.\n */\nimport React, {Component} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nclass Nav extends React.Component  {\n\n    render() {\n        return (\n            <ul className=\"nav\">\n                <li>\n                    <NavLink exact activeClassName='active' to='/'>\n                        Home\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink exact activeClassName='active' to='/battle'>\n                        Battle\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink exact activeClassName='active' to='/popular'>\n                        Popular\n                    </NavLink>\n                </li>\n            </ul>\n        )\n    }\n\n\n}\n\nexport default Nav;","/**\n * Created by mumarm45 on 29/11/2018.\n */\nimport React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"homeContainer\">\n                <h1>Git Battle</h1>\n                <Link className=\"button\" to='/battle'>\n                    Battle\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default Home;","/**\n * Created by mumarm45 on 26/11/2018.\n */\n\nimport axios from \"axios\";\n\n\nlet id = 'mumarm45@gmail.com';\nlet secret_Key = 'ef31776a8d14b1e67f0d53c19a466d49e6bd1842';\nlet params = `?client=${id}&client_secret=${secret_Key}`;\n\nlet getProfile = (username) => {\n    return axios.get(`https://api.github.com/users/${username}${params}`).then((user) => user.data);\n};\n\nlet getRepo = (username) => {\n    return axios.get(`https://api.github.com/users/${username}/repos${params}&per_page=100`).then((user) => user.data);\n};\n\nexport let fetchPopularRepository = (language) => {\n    let encodedURI = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`);\n\n    return axios.get(encodedURI).then(res => res.data.items);\n};\n\nlet getStarCount = (repos) => {\n    return repos.reduce((count, resp) => {\n        return count + resp.stargazers_count;\n    }, 0)\n};\n\nlet calculateScore = (profile, repos) => {\n    return (profile.followers * 3) + getStarCount(repos);\n};\nlet getUserData = (player) => {\n  return  axios.all([\n        getProfile(player), getRepo(player)\n    ]).then((data) => {\n        let profile = data[0];\n        let score = calculateScore(profile, data[1]);\n        return {\n            profile: data[0],\n            score: score\n        }\n    });\n};\nlet sortPlayer = (players) => {\n    return players.sort((a, b) => b.score - a.score);\n};\nexport let battle = (players) => {\n  return  axios.all(players.map(getUserData)).then(sortPlayer).catch((err) => {\n        return null;\n    });\n};","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport {fetchPopularRepository} from \"../util/api\";\n\nlet SelectLanguage = (props) => {\n    let languages = ['ALL', 'JAVA', 'JAVASCRIPT'];\n    return (\n        <ul className=\"languages\">\n            {\n                languages.map(\n                    (lang) => {\n                        return (\n                            <li style={lang === props.selectedLanguage ? {color: 'red'} : null }\n                                onClick={props.onSelect.bind(null, lang)}\n                                key={lang}>{lang}</li>\n                        )\n\n                    })\n            }\n\n        </ul>\n    );\n};\n\nlet RepoGrid = (props) => {\n    return (\n        <ul className=\"pros-list\">\n            {props.repo.map((re, idx) => {\n                return (\n                    <li className=\"prop-item\">\n                        <div className=\"\">#{idx + 1}</div>\n                        <ul className=\"space-list-item\">\n                            <li>\n                                <img className=\"avatar\"\n                                     src={re.owner.avatar_url}\n                                     alt={'Avatar for' + re.owner.login}/>\n                            </li>\n                            <li>\n                                <a href={re.html_url}>{re.name}</a>\n                            </li>\n                            <li>@{re.owner.login}</li>\n                            <li>{re.stargazers_count} stars</li>\n                        </ul>\n                    </li>\n                )\n            })}\n\n        </ul>\n    );\n};\nRepoGrid.prototype = {\n    \"repo\": PropTypes.array.isRequired\n};\nSelectLanguage.prototype = {\n    selectedLanguage: PropTypes.string.isRequired,\n    onSelect: PropTypes.func.isRequired,\n};\nclass Popular extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedLanguage: 'ALL',\n            repositories: null\n        };\n\n        this.updateLanguage = this.updateLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateLanguage(this.state.selectedLanguage);\n    }\n\n    updateLanguage(lang) {\n        this.setState(() => {\n            return {\n                selectedLanguage: lang,\n                repositories: null\n            }\n        });\n\n        fetchPopularRepository(lang).then(response => {\n            this.setState(() => {\n                return {\n                    repositories: response\n                }\n            })\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <SelectLanguage selectedLanguage={this.state.selectedLanguage} onSelect={this.updateLanguage}/>;\n                {!this.state.repositories ? <p>Loading....</p> : <RepoGrid repo={this.state.repositories}/>}\n            </div>\n        );\n\n\n    }\n}\n\nexport default Popular;","/**\n * Created by mumarm45 on 29/11/2018.\n */\nimport React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass PlayerInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        let value = event.target.value;\n        this.setState(() => {\n            return {username: value}\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        this.props.onSubmit(this.props.id, this.state.username)\n    }\n\n    render() {\n        return (\n            <form className=\"column\" onSubmit={this.handleSubmit}>\n                <label className=\"header\" htmlFor=\"username\">\n                    {this.props.label}\n                </label>\n                <input id=\"username\" placeholder=\"github username\"\n                       type=\"text\" autoComplete=\"off\" value={this.state.username} onChange={this.handleChange}/>\n\n                <button className=\"button\" type=\"submit\" disabled={!this.state.username}>\n                    Submit\n                </button>\n            </form>\n\n        )\n    }\n\n\n}\n\nPlayerInput.protoType = {\n    \"id\": PropTypes.string.isRequired,\n    \"label\": PropTypes.string.isRequired,\n    \"onSubmit\": PropTypes.func.isRequired\n};\n\nPlayerInput.defaultProps = {\n    label: 'Username'\n};\n\nexport default  PlayerInput;","/**\n * Created by mumarm45 on 09/12/2018.\n */\n\nimport PropTypes from \"prop-types\";\nimport React, {Component} from \"react\";\n\nlet PreviewPlayer = (props) => {\n\n    return (\n        <div className=\"column\">\n            <img className=\"avatar\" src={props.avatar} alt={'Avatar for' + props.username}/>\n            <h2 className=\"username\">@{props.username}</h2>\n            {props.children}\n        </div>\n    );\n};\nPreviewPlayer.protoType = {\n    \"avatar\": PropTypes.string.isRequired,\n    \"username\": PropTypes.string.isRequired,\n};\n\nexport default PreviewPlayer;","/**\n * Created by mumarm45 on 29/11/2018.\n */\nimport React, {Component} from \"react\";\nimport PlayerInput from \"./PlayerInput\";\nimport PlayerPreview from \"./PlayerPreview\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nclass Battle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerOneName: '',\n            playerTwoName: '',\n            playerOneImage: null,\n            playerTwoImage: null,\n        };\n\n        this.handelSubmit = this.handelSubmit.bind(this);\n        this.onResetHandler = this.onResetHandler.bind(this);\n    }\n\n\n    handelSubmit(id, username) {\n        this.setState(() => {\n            let newState = {};\n            newState[id + 'Name'] = username;\n            newState[id + 'Image'] = `https://github.com/${username}.png`;\n            return newState;\n        })\n\n    }\n\n    onResetHandler(id) {\n        this.setState(() => {\n            let newState = {};\n            newState[id + 'Name'] = '';\n            newState[id + 'Image'] = null;\n            return newState;\n        });\n    }\n\n    render() {\n        let match = this.props.match;\n        let playerOneName = this.state.playerOneName;\n        let playerTwoName = this.state.playerTwoName;\n        let playerTwoImage = this.state.playerTwoImage;\n        let playerOneImage = this.state.playerOneImage;\n        return (\n            <div className=\"row\">\n                {!playerOneName && <PlayerInput\n                    id='playerOne'\n                    label=\"Player One\"\n                    onSubmit={this.handelSubmit}\n                />}\n                {playerOneImage !== null && <PlayerPreview\n                    avatar={playerOneImage}\n                    username={playerOneName}\n                >\n                    <button className=\"reset\" onClick={this.onResetHandler.bind(null, 'playerOne')}>reset</button>\n                </PlayerPreview>}\n                {!playerTwoName && <PlayerInput\n                    id='playerTwo'\n                    label=\"Player Two\"\n                    onSubmit={this.handelSubmit}\n                />}\n                {playerTwoImage !== null && <PlayerPreview\n                    avatar={playerTwoImage}\n                    username={playerTwoName}\n                ><button className=\"reset\" onClick={this.onResetHandler.bind(null, 'playerTwo')}>reset</button></PlayerPreview>}\n\n                {playerOneImage && playerTwoImage &&\n                <Link className=\"button\" to={{\n                    pathname: match.url + '/results',\n                    search: `?playerOneName=${playerOneName}&playerTwoName=${playerTwoName}`\n                }}>\n\n                    Battle\n                </Link>}\n            </div>\n        )\n    }\n}\n\nexport default Battle;","/**\n * Created by mumarm45 on 29/11/2018.\n */\nimport React, {Component} from \"react\";\nimport {parse} from \"query-string\";\nimport {battle} from \"../util/api\";\nimport PlayerPreview from \"./PlayerPreview\";\nimport PropTypes from \"prop-types\";\n\nlet Player = (props) => {\n    return (<div>\n        <h3>{props.lable}</h3>\n        <p>Score:{props.score}</p>\n        <Profile info={props.profile}/>\n    </div>)\n};\n\nPlayer.protoTypes = {\n    avatar: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n};\n\nlet Profile = (props) => {\n    let info = props.info;\n    return (\n        <PlayerPreview avatar={info.avatar_url} username={info.login}>\n            <ul className=\"space-list-item\">\n                {info.name && <li>{info.name}</li>}\n                {info.location && <li>{info.location}</li>}\n                {info.company && <li>{info.company}</li>}\n                <li>Followers : {info.followers}</li>\n                <li>Following : {info.following}</li>\n                <li>Public Post : {info.public_repos}</li>\n                {info.blog && <li><a href={info.blog}>{info.blog}</a></li>}\n\n            </ul>\n        </PlayerPreview>\n    );\n};\nProfile.protoTypes = {\n    info: PropTypes.string.isRequired\n};\n\nclass Result extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            winner: null,\n            loser: null,\n            error: null,\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        let players = parse(this.props.location.search);\n        battle([players.playerOneName, players.playerTwoName]).then((result) => {\n            if (result === null) {\n                this.setState(() => {\n                    return {\n                        error: 'Check username',\n                        loading: false,\n                        winner: null,\n                        loser: null\n                    }\n                });\n            }\n            this.setState(() => {\n                return {\n                    error: null,\n                    loading: false,\n                    winner: result[0],\n                    loser: result[1]\n                }\n            });\n        });\n    }\n\n    render() {\n        let winner = this.state.winner;\n        let loser = this.state.loser;\n        let loading = this.state.loading;\n        let error = this.state.error;\n        if (loading === true) {\n            return (<p>Loading...</p>)\n        }\n\n        if (error) {\n            return (<div><p>error</p></div>)\n        }\n\n        return (\n            <div className=\"row\">\n                <Player lable='Winner' score={winner.score} profile={winner.profile}/>\n                <Player lable='Loser' score={loser.score} profile={loser.profile}/>\n            </div>\n        )\n    }\n}\n\nexport default  Result;","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport {BrowserRouter as  Router, Route, Switch} from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport Home from \"./Home\";\nimport Popular from \"./Popular\";\nimport Battle from \"./Battle\";\nimport Result from \"./Result\";\nimport store from '../store/Todostore'\nclass App extends Component {\n    render() {\n        let stor = this.props.store;\n        return (\n            <Router>\n                <div className=\"container\">\n                    <Nav/>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/popular' component={Popular}/>\n                        <Route exact path='/battle' component={Battle}/>\n                        <Route path='/battle/results' component={Result}/>\n                        <Route render={() => <p>Not Found</p>}/>\n                    </Switch>\n                </div>\n            </Router>\n\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}